{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Project-Jagrudhi\\\\frontend\\\\src\\\\components\\\\Spinner.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport WheelComponent from \"react-wheel-of-prizes\";\nimport { Alert } from 'reactstrap';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spinner = props => {\n  _s();\n  const [played, Setplayed] = useState(false);\n  const segments = ['better luck vS', '500 ₹', '1500 ₹', 'better luck vS', '3000 ₹', '2000 ₹', 'better luck vS', '1000 ₹'];\n  const segColors = ['#EE4040', '#F0CF50', '#815CD1', '#3DA5E0', '#34A24F', '#F9AA1F', '#EC3F3F', '#FF9000'];\n  const onFinished = async winner => {\n    console.log(winner);\n    Setplayed(true);\n    console.log(played);\n    alert(\"Hurray You won 1500/- Myntra EVoucher. Details will be shared soonly to \\\"jagruthinaidu01@gmail.com\\\"\");\n    alert(\"Thanks for Your time here. Once again Happy Birthday Jagruthi\");\n    alert(\"You may close this window now!!!.  See you soon in next Challenges Bye!!...\");\n    const res = await axios.get('https://demo-agpr.onrender.com/mail');\n    console.log(res.data.success);\n  };\n  const myStyle = {\n    textAlign: 'center',\n    fonFamily: 'sans-serif',\n    fontSize: '26px',\n    textAlign: 'left',\n    width: '100%',\n    paddingTop: '70px',\n    float: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You are only allowed to Spin once. Each block has fair chances of selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(WheelComponent, {\n          style: myStyle,\n          segments: segments,\n          segColors: segColors,\n          winningSegment: \"1500 \\u20B9\",\n          onFinished: winner => onFinished(winner),\n          primaryColor: \"black\",\n          contrastColor: \"white\",\n          buttonText: \"Spin\",\n          isOnlyOnce: true,\n          size: 220,\n          upDuration: 100,\n          downDuration: 1000,\n          fontFamily: \"Arial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Spinner, \"O96cT0t1u/tKg6xCDLmSAHJRF0I=\");\n_c = Spinner;\nexport default Spinner;\nvar _c;\n$RefreshReg$(_c, \"Spinner\");","map":{"version":3,"names":["React","useState","axios","WheelComponent","Alert","jsxDEV","_jsxDEV","Spinner","props","_s","played","Setplayed","segments","segColors","onFinished","winner","console","log","alert","res","get","data","success","myStyle","textAlign","fonFamily","fontSize","width","paddingTop","float","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","winningSegment","primaryColor","contrastColor","buttonText","isOnlyOnce","size","upDuration","downDuration","fontFamily","_c","$RefreshReg$"],"sources":["D:/Projects/Project-Jagrudhi/frontend/src/components/Spinner.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nimport WheelComponent from \"react-wheel-of-prizes\";\r\nimport { Alert} from 'reactstrap';\r\nimport '../App.css';\r\n\r\n\r\n\r\nconst Spinner = (props) => {\r\n \r\n  const [played, Setplayed] = useState(false);\r\n\r\n  const segments = [\r\n    'better luck vS',\r\n    '500 ₹',\r\n    '1500 ₹',\r\n    'better luck vS',\r\n    '3000 ₹',\r\n    '2000 ₹',\r\n    'better luck vS',\r\n    '1000 ₹'\r\n  ]\r\n  const segColors = [\r\n    '#EE4040',\r\n    '#F0CF50',\r\n    '#815CD1',\r\n    '#3DA5E0',\r\n    '#34A24F',\r\n    '#F9AA1F',\r\n    '#EC3F3F',\r\n    '#FF9000'\r\n  ]\r\n  const onFinished = async(winner) => {\r\n    console.log(winner);\r\n    Setplayed(true);\r\n    console.log(played);\r\n    alert(\"Hurray You won 1500/- Myntra EVoucher. Details will be shared soonly to \\\"jagruthinaidu01@gmail.com\\\"\");\r\n    alert(\"Thanks for Your time here. Once again Happy Birthday Jagruthi\");\r\n    alert(\"You may close this window now!!!.  See you soon in next Challenges Bye!!...\")\r\n    const res = await axios.get('https://demo-agpr.onrender.com/mail')\r\n    console.log(res.data.success);\r\n    \r\n  }\r\n\r\n  const myStyle = {\r\n    textAlign: 'center',\r\n    fonFamily: 'sans-serif',\r\n    fontSize: '26px',\r\n    textAlign: 'left',\r\n    width: '100%',\r\n    paddingTop: '70px',\r\n    float: 'center'\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n     <Alert><h1>You are only allowed to Spin once. Each block has fair chances of selection</h1></Alert>\r\n    <div className=\"App\">\r\n    \r\n    <div>\r\n      <WheelComponent\r\n      style ={myStyle}\r\n        segments={segments}\r\n        segColors={segColors}\r\n        winningSegment='1500 ₹'\r\n        onFinished={(winner) => onFinished(winner)}\r\n        primaryColor='black'\r\n        contrastColor='white'\r\n        buttonText='Spin'\r\n        isOnlyOnce={true}\r\n        size={220}\r\n        upDuration={100}\r\n        downDuration={1000}\r\n        fontFamily='Arial'\r\n      />\r\n    </div>\r\n    </div>\r\n     </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default Spinner;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}